# -*- coding: utf-8 -*-
"""Predictions the Year of the Orbital Elements of Near-Earth Comets - Artificial Intelligence Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uGTTOmfCu7yHPnRn215Tj5-SHc1UOEsa

# **Predictions the Year of the Orbital Elements of Near-Earth Comets - Artificial Intelligence Project**

---

I have created an Artificial Intelligence software that Predictions the Year of the Orbital Elements of Near-Earth Comets. This artificial intelligence software is built according to the regression principles. It has 99.25% accuracy value, 0.0406 MAE loss value. The code system is open-sourced publicly by me on Kaggle and GitHub in notebook style and python code style. Data taken from Nasa.gov.
Emirhan BULUT
Senior Artificial Intelligence Engineer


###**The coding language used:**

`Python 3.9.8`

###**Libraries Used:**

`scikit-learn (sklearn)`

`NumPy`

`Matplotlib`

`Pandas`

`glob`

`os`

`Seaborn`

<img class="fit-picture"
     src="https://github.com/emirhanai/Predictions-the-Year-of-the-Orbital-Elements-of-Near-Earth-Comets---Artificial-Intelligence-Project/blob/main/Predictions%20the%20Year%20of%20the%20Orbital%20Elements%20of%20Near-Earth%20Comets%20-%20Artificial%20Intelligence%20Project.png?raw=true"
     alt="Predictions the Year of the Orbital Elements of Near-Earth Comets - Artificial Intelligence Project">
     
### **Developer Information:**

Name-Surname: **Emirhan BULUT**

Contact (Email) : **emirhan@isap.solutions**

LinkedIn : **[https://www.linkedin.com/in/artificialintelligencebulut/][LinkedinAccount]**

[LinkedinAccount]: https://www.linkedin.com/in/artificialintelligencebulut/

Kaggle: **[https://www.kaggle.com/emirhanai][Kaggle]**

Official Website: **[https://www.emirhanbulut.com.tr][OfficialWebSite]**

[Kaggle]: https://www.kaggle.com/emirhanai

[OfficialWebSite]: https://www.emirhanbulut.com.tr

## üíΩ Google Drive Mount
"""

from google.colab import drive
drive.mount('/content/drive')

"""## ‚¨áÔ∏è Data Download"""

!unzip /content/Near-Earth_Comets_-_Orbital_Elements.zip

"""## üì• > üìô Import to Libraries"""

import os
import glob
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt

"""## üìã Data Preparing

### Data Loading
"""

data = pd.read_csv('/content/Near-Earth_Comets_-_Orbital_Elements/Near-Earth_Comets_-_Orbital_Elements.csv')
data.head()

"""### Data Seperating"""

from sklearn.model_selection import train_test_split
X = data.iloc[:,1:11]
y = data.iloc[:,9:10]
X = X.drop(['P (yr)'],axis=1)
X_train,X_test,y_train,y_test = train_test_split(X,y,shuffle=True,test_size=0.05)

"""**Label** = Years

**Feature** = Orbital Element's various features

## üß± Models Structure and Code [Function]
"""

def emir_model():
  model = ExtraTreesRegressor()
  return model

def function(name_model):

    print('#####~Model => {} '.format(name_model))

    model = emir_model()
    model.fit(X_train,y_train)
    prediction = model.predict(X_test)
    
    print('\033[01m              Regression_report \033[0m')
    
    print('\033[01m              Results \033[0m')
    # Results
    accuracy = r2_score(y_test,prediction)
    loss = mean_absolute_error(y_test,prediction)
    print("    Test MAE Loss:\033[31m \033[01m {:.5f} \033[30m \033[0m".format(loss))
    print("Test Accuracy:\033[32m \033[01m {:.2f}% \033[30m \033[0m".format(accuracy * 100))
    
    return accuracy,loss

"""## üèÉ‚Äç‚ôÇÔ∏è Emirhan Model Benchmark Scores

### Model Emirhan
"""

model_name = "Emirhan_Prediction_Year_of_Near_Earth_Comets_Orbit_Elements_with_Artificial_Intelligence"
result_emirhan = func(model_name)

"""## üìä Finally Result of Table (DataFrame - Pandas)"""

accuracy_result_table = pd.DataFrame({'Model':['Emirhan_Model'],
                      'Accuracy':[result_emirhan[0]]})

accuracy_result_table

plt.figure(figsize=(12, 7))
plots = sns.barplot(x='Model', y='Accuracy', data=accuracy_result_table)
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=15, xytext=(0, 9),
                   textcoords='offset points')

plt.xlabel("Models")
plt.ylabel("Accuracy")
plt.xticks(rotation=20);

loss_result_table = pd.DataFrame({'Model':['Emirhan_Model'],
                      'Loss':[result_emirhan[1]]})

loss_result_table

plt.figure(figsize=(12, 7))
plots = sns.barplot(x='Model', y='Loss', data=loss_result_table)
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=15, xytext=(0, 9),
                   textcoords='offset points')

plt.xlabel("Models")
plt.ylabel("Loss")
plt.xticks(rotation=20);